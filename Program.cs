using System.Text;
using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Globalization;
using System.Threading;
using System.Runtime.ExceptionServices;
using System.Xml.Schema;

namespace Battle_Boats
{
    internal class Program
    {
        //This part of the code is to open the console windowed fullscreen. But, somehow, it only works on school computers.
        [DllImport("kernel32.dll", ExactSpelling = true)]
        private static extern IntPtr GetConsoleWindow();
        private static IntPtr ThisConsole = GetConsoleWindow();
        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);
        private const int HIDE = 0;
        private const int MAXIMIZE = 3;
        private const int MINIMIZE = 6;
        private const int RESTORE = 9;            
        static void Main(string[] args) // The main purpose of this is just to resize the console and run the game.
        {
            Console.SetWindowSize(Console.LargestWindowWidth, Console.LargestWindowHeight);
            ShowWindow(ThisConsole, MAXIMIZE);

            Main_Menu(0);
        }
        static void Main_Menu(int opt) // The screen that the player will see as soon as the game starts
        {
            Console.Clear();
            if (opt == 0) // Main menu with 'PLAY' selected
            {
                Console.Write(
                    "#--------------------------------------------------------------------------------------------------------------------------------------------------------------#\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                          __________         __    __  .__           __________              __                                               |\r\n" +
                    "|                                          \\______   \\_____ _/  |__/  |_|  |   ____   \\______   \\ _________ _/  |_  ______                                     |\r\n" +
                    "|                                           |    |  _/\\__  \\\\   __\\   __\\  | _/ __ \\   |    |  _//  _ \\__  \\\\   __\\/  ___/                                     |\r\n" +
                    "|               **  **                      |    |   \\ / __ \\|  |  |  | |  |_\\  ___/   |    |   (  <_> ) __ \\|  |  \\___ \\                                      |\r\n" +
                    "|                ****                       |______  /(____  /__|  |__| |____/\\___  >  |______  /\\____(____  /__| /____  >                                     |\r\n" +
                    "|               |\\**/|                             \\/      \\/                     \\/          \\/           \\/          \\/                                      |\r\n" +
                    "|               \\ == /                                                                                                                                         |\r\n" +
                    "|                |  |                                                                                                                                          |\r\n" +
                    "|                |  |                                                                                              /\\      /\\      /\\      /\\                  |\r\n" +
                    "|                \\  /                                                                                             /  \\    /  \\    /  \\    /  \\                 |\r\n" +
                    "|                 \\/     __/___                                                                                   |  |    |  |    |  |    |  |                 |\r\n" +
                    "|                  _____/______|                                                                                  |  |    |  |    |  |    |  |                 |\r\n" +
                    "|          _______/_____\\_______\\_____                                                                           / == \\  / == \\  / == \\  / == \\                |\r\n" +
                    "|          \\              < < <       |                                                                       [] |/¯¯\\|  |/¯¯\\|  |/¯¯\\|  |/¯¯\\|         []     |\r\n" +
                    "|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[][][][][][][][][][][][][][][][][][][][][][]~~~~~|\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                 ___   _        _    __   __                                                                  |\r\n" +
                    "|                                                                | _ \\ | |      /_\\   \\ \\ / /                                                                  |\r\n" +
                    "|                                                       =====>   |  _/ | |__   / _ \\   \\ V /    <=====                                                         |\r\n" +
                    "|                                                                |_|   |____| /_/ \\_\\   |_|                                                                    |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                 ___    _   _   ___   _____      ___     _     __  __   ___                                                   |\r\n" +
                    "|                                                / _ \\  | | | | |_ _| |_   _|    / __|   /_\\   |  \\/  | | __|                                                  |\r\n" +
                    "|                                               | (_) | | |_| |  | |    | |     | (_ |  / _ \\  | |\\/| | | _|                                                   |\r\n" +
                    "|                                                \\__\\_\\  \\___/  |___|   |_|      \\___| /_/ \\_\\ |_|  |_| |___|                                                  |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|     ESC or Left                                                                                                                             Enter or Right   |\r\n" +
                    "|     to go back                                                                                                                              to continue      |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "#--------------------------------------------------------------------------------------------------------------------------------------------------------------#\r\n");
            }
            else if (opt == 1) // Main menu with 'QUIT GAME' selected
            {
                Console.Write(
                    "#--------------------------------------------------------------------------------------------------------------------------------------------------------------#\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                          __________         __    __  .__           __________              __                                               |\r\n" +
                    "|                                          \\______   \\_____ _/  |__/  |_|  |   ____   \\______   \\ _________ _/  |_  ______                                     |\r\n" +
                    "|                                           |    |  _/\\__  \\\\   __\\   __\\  | _/ __ \\   |    |  _//  _ \\__  \\\\   __\\/  ___/                                     |\r\n" +
                    "|               **  **                      |    |   \\ / __ \\|  |  |  | |  |_\\  ___/   |    |   (  <_> ) __ \\|  |  \\___ \\                                      |\r\n" +
                    "|                ****                       |______  /(____  /__|  |__| |____/\\___  >  |______  /\\____(____  /__| /____  >                                     |\r\n" +
                    "|               |\\**/|                             \\/      \\/                     \\/          \\/           \\/          \\/                                      |\r\n" +
                    "|               \\ == /                                                                                                                                         |\r\n" +
                    "|                |  |                                                                                                                                          |\r\n" +
                    "|                |  |                                                                                              /\\      /\\      /\\      /\\                  |\r\n" +
                    "|                \\  /                                                                                             /  \\    /  \\    /  \\    /  \\                 |\r\n" +
                    "|                 \\/     __/___                                                                                   |  |    |  |    |  |    |  |                 |\r\n" +
                    "|                  _____/______|                                                                                  |  |    |  |    |  |    |  |                 |\r\n" +
                    "|          _______/_____\\_______\\_____                                                                           / == \\  / == \\  / == \\  / == \\                |\r\n" +
                    "|          \\              < < <       |                                                                       [] |/¯¯\\|  |/¯¯\\|  |/¯¯\\|  |/¯¯\\|         []     |\r\n" +
                    "|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[][][][][][][][][][][][][][][][][][][][][][]~~~~~|\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                 ___   _        _    __   __                                                                  |\r\n" +
                    "|                                                                | _ \\ | |      /_\\   \\ \\ / /                                                                  |\r\n" +
                    "|                                                                |  _/ | |__   / _ \\   \\ V /                                                                   |\r\n" +
                    "|                                                                |_|   |____| /_/ \\_\\   |_|                                                                    |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                 ___    _   _   ___   _____      ___     _     __  __   ___                                                   |\r\n" +
                    "|                                                / _ \\  | | | | |_ _| |_   _|    / __|   /_\\   |  \\/  | | __|                                                  |\r\n" +
                    "|                                      =====>   | (_) | | |_| |  | |    | |     | (_ |  / _ \\  | |\\/| | | _|    <=====                                         |\r\n" +
                    "|                                                \\__\\_\\  \\___/  |___|   |_|      \\___| /_/ \\_\\ |_|  |_| |___|                                                  |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|     ESC or Left                                                                                                                             Enter or Right   |\r\n" +
                    "|     to go back                                                                                                                              to continue      |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "#--------------------------------------------------------------------------------------------------------------------------------------------------------------#\r\n");
            }
            switch (Console.ReadKey(true).Key) // Actions based on every key player presses | Arrows to change screen and Enter to continue
            {
                case ConsoleKey.W:
                case ConsoleKey.UpArrow:
                    Main_Menu((opt + 1) % 2);
                    return;
                case ConsoleKey.S:
                case ConsoleKey.DownArrow:
                    Main_Menu((opt + 1) % 2);
                    return;
                case ConsoleKey.Enter:
                case ConsoleKey.RightArrow:
                    if (opt == 0)
                    {
                        Play_Menu(0); // Continues the program by calling Play_Menu procedure
                        return;
                    }
                    else if (opt == 1)
                    {
                        return;
                    }
                    return;
            }
            Main_Menu(opt);
            return;
        }
        static void Play_Menu(int opt) // The screen to be presented as the player continues from the Main Menu
        {
            Console.Clear();
            if (opt == 0) // The play menu with 'NEW GAME' selected
            {
                Console.Write(
                    "#--------------------------------------------------------------------------------------------------------------------------------------------------------------#\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                          __________         __    __  .__           __________              __                                               |\r\n" +
                    "|                                          \\______   \\_____ _/  |__/  |_|  |   ____   \\______   \\ _________ _/  |_  ______                                     |\r\n" +
                    "|                                           |    |  _/\\__  \\\\   __\\   __\\  | _/ __ \\   |    |  _//  _ \\__  \\\\   __\\/  ___/                                     |\r\n" +
                    "|               **  **                      |    |   \\ / __ \\|  |  |  | |  |_\\  ___/   |    |   (  <_> ) __ \\|  |  \\___ \\                                      |\r\n" +
                    "|                ****                       |______  /(____  /__|  |__| |____/\\___  >  |______  /\\____(____  /__| /____  >                                     |\r\n" +
                    "|               |\\**/|                             \\/      \\/                     \\/          \\/           \\/          \\/                                      |\r\n" +
                    "|               \\ == /                                                                                                                                         |\r\n" +
                    "|                |  |                                                                                                                                          |\r\n" +
                    "|                |  |                                                                                              /\\      /\\      /\\      /\\                  |\r\n" +
                    "|                \\  /                                                                                             /  \\    /  \\    /  \\    /  \\                 |\r\n" +
                    "|                 \\/     __/___                                                                                   |  |    |  |    |  |    |  |                 |\r\n" +
                    "|                  _____/______|                                                                                  |  |    |  |    |  |    |  |                 |\r\n" +
                    "|          _______/_____\\_______\\_____                                                                           / == \\  / == \\  / == \\  / == \\                |\r\n" +
                    "|          \\              < < <       |                                                                       [] |/¯¯\\|  |/¯¯\\|  |/¯¯\\|  |/¯¯\\|         []     |\r\n" +
                    "|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[][][][][][][][][][][][][][][][][][][][][][]~~~~~|\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                            _  _ _____      __   ___   _   __  __ ___                                                         |\r\n" +
                    "|                                                           | \\| | __\\ \\    / /  / __| /_\\ |  \\/  | __|                                                        |\r\n" +
                    "|                                                  =====>   | .` | _| \\ \\/\\/ /  | (_ |/ _ \\| |\\/| | _|    <=====                                               |\r\n" +
                    "|                                                           |_|\\_|___| \\_/\\_/    \\___/_/ \\_\\_|  |_|___|                                                        |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                           _    ___   _   ___     ___   _   __  __ ___                                                        |\r\n" +
                    "|                                                          | |  / _ \\ /_\\ |   \\   / __| /_\\ |  \\/  | __|                                                       |\r\n" +
                    "|                                                          | |_| (_) / _ \\| |) | | (_ |/ _ \\| |\\/| | _|                                                        |\r\n" +
                    "|                                                          |____\\___/_/ \\_\\___/   \\___/_/ \\_\\_|  |_|___|                                                       |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|     ESC or Left                                                                                                                             Enter or Right   |\r\n" +
                    "|     to go back                                                                                                                              to continue      |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "#--------------------------------------------------------------------------------------------------------------------------------------------------------------#\r\n");
            }
            else if (opt == 1) // The play menu with 'LOAD GAME' selected
            {
                Console.Write(
                    "#--------------------------------------------------------------------------------------------------------------------------------------------------------------#\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                          __________         __    __  .__           __________              __                                               |\r\n" +
                    "|                                          \\______   \\_____ _/  |__/  |_|  |   ____   \\______   \\ _________ _/  |_  ______                                     |\r\n" +
                    "|                                           |    |  _/\\__  \\\\   __\\   __\\  | _/ __ \\   |    |  _//  _ \\__  \\\\   __\\/  ___/                                     |\r\n" +
                    "|               **  **                      |    |   \\ / __ \\|  |  |  | |  |_\\  ___/   |    |   (  <_> ) __ \\|  |  \\___ \\                                      |\r\n" +
                    "|                ****                       |______  /(____  /__|  |__| |____/\\___  >  |______  /\\____(____  /__| /____  >                                     |\r\n" +
                    "|               |\\**/|                             \\/      \\/                     \\/          \\/           \\/          \\/                                      |\r\n" +
                    "|               \\ == /                                                                                                                                         |\r\n" +
                    "|                |  |                                                                                                                                          |\r\n" +
                    "|                |  |                                                                                              /\\      /\\      /\\      /\\                  |\r\n" +
                    "|                \\  /                                                                                             /  \\    /  \\    /  \\    /  \\                 |\r\n" +
                    "|                 \\/     __/___                                                                                   |  |    |  |    |  |    |  |                 |\r\n" +
                    "|                  _____/______|                                                                                  |  |    |  |    |  |    |  |                 |\r\n" +
                    "|          _______/_____\\_______\\_____                                                                           / == \\  / == \\  / == \\  / == \\                |\r\n" +
                    "|          \\              < < <       |                                                                       [] |/¯¯\\|  |/¯¯\\|  |/¯¯\\|  |/¯¯\\|         []     |\r\n" +
                    "|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[][][][][][][][][][][][][][][][][][][][][][]~~~~~|\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                            _  _ _____      __   ___   _   __  __ ___                                                         |\r\n" +
                    "|                                                           | \\| | __\\ \\    / /  / __| /_\\ |  \\/  | __|                                                        |\r\n" +
                    "|                                                           | .` | _| \\ \\/\\/ /  | (_ |/ _ \\| |\\/| | _|                                                         |\r\n" +
                    "|                                                           |_|\\_|___| \\_/\\_/    \\___/_/ \\_\\_|  |_|___|                                                        |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                           _    ___   _   ___     ___   _   __  __ ___                                                        |\r\n" +
                    "|                                                          | |  / _ \\ /_\\ |   \\   / __| /_\\ |  \\/  | __|                                                       |\r\n" +
                    "|                                                 =====>   | |_| (_) / _ \\| |) | | (_ |/ _ \\| |\\/| | _|    <=====                                              |\r\n" +
                    "|                                                          |____\\___/_/ \\_\\___/   \\___/_/ \\_\\_|  |_|___|                                                       |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|     ESC or Left                                                                                                                             Enter or Right   |\r\n" +
                    "|     to go back                                                                                                                              to continue      |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "#--------------------------------------------------------------------------------------------------------------------------------------------------------------#\r\n");
            }
            switch (Console.ReadKey(true).Key)
            {
                case ConsoleKey.W:
                case ConsoleKey.UpArrow:
                    Play_Menu((opt + 1) % 2);
                    return;
                case ConsoleKey.S:
                case ConsoleKey.DownArrow:
                    Play_Menu((opt + 1) % 2);
                    return;
                case ConsoleKey.A:
                case ConsoleKey.LeftArrow:
                case ConsoleKey.Escape:
                    Main_Menu(0);
                    return;
                case ConsoleKey.Enter:
                case ConsoleKey.D:
                case ConsoleKey.RightArrow:
                    if (opt == 0) // When the player chooses to playe a new game, the program loads a game with an empty game file.
                    {
                        string[] save_file = { "0", ",,", ",,", "", "NO"}; // Num. of player's battlships placed | player's grid info | computer's grid info | save file | computer placed battleships?
                        Game(save_file);
                    }
                    else
                    {
                        Load_Game(0); // Else, the procedure Load_Game is called to actually load a game file.
                        return;
                    }
                    return;
            }
            Play_Menu(opt);
            return;
        }
        static void Load_Game(int opt) // The screen where the player chooses a game file to load
        {
            Console.Clear();
            string[] save_file = new string[5];
            if (opt == 0) // File_1
            {
                Console.Write(
                    "#--------------------------------------------------------------------------------------------------------------------------------------------------------------#\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                          __________         __    __  .__           __________              __                                               |\r\n" +
                    "|                                          \\______   \\_____ _/  |__/  |_|  |   ____   \\______   \\ _________ _/  |_  ______                                     |\r\n" +
                    "|                                           |    |  _/\\__  \\\\   __\\   __\\  | _/ __ \\   |    |  _//  _ \\__  \\\\   __\\/  ___/                                     |\r\n" +
                    "|               **  **                      |    |   \\ / __ \\|  |  |  | |  |_\\  ___/   |    |   (  <_> ) __ \\|  |  \\___ \\                                      |\r\n" +
                    "|                ****                       |______  /(____  /__|  |__| |____/\\___  >  |______  /\\____(____  /__| /____  >                                     |\r\n" +
                    "|               |\\**/|                             \\/      \\/                     \\/          \\/           \\/          \\/                                      |\r\n" +
                    "|               \\ == /                                                                                                                                         |\r\n" +
                    "|                |  |                                                                                                                                          |\r\n" +
                    "|                |  |                                                                                              /\\      /\\      /\\      /\\                  |\r\n" +
                    "|                \\  /                                                                                             /  \\    /  \\    /  \\    /  \\                 |\r\n" +
                    "|                 \\/     __/___                                                                                   |  |    |  |    |  |    |  |                 |\r\n" +
                    "|                  _____/______|                                                                                  |  |    |  |    |  |    |  |                 |\r\n" +
                    "|          _______/_____\\_______\\_____                                                                           / == \\  / == \\  / == \\  / == \\                |\r\n" +
                    "|          \\              < < <       |                                                                       [] |/¯¯\\|  |/¯¯\\|  |/¯¯\\|  |/¯¯\\|         []     |\r\n" +
                    "|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[][][][][][][][][][][][][][][][][][][][][][]~~~~~|\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                        ___  _  _        _                                                                    |\r\n" +
                    "|                                                                       | __|(_)| | ___  / |                                                                   |\r\n" +
                    "|                                                              =====>   | _| | || |/ -_) | |     <=====                                                        |\r\n" +
                    "|                                                                       |_|  |_||_|\\___| |_|                                                                   |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                        ___  _  _        ___                                                                  |\r\n" +
                    "|                                                                       | __|(_)| | ___  |_  )                                                                 |\r\n" +
                    "|                                                                       | _| | || |/ -_)  / /                                                                  |\r\n" +
                    "|                                                                       |_|  |_||_|\\___| /___|                                                                 |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                        ___  _  _        ____                                                                 |\r\n" +
                    "|                                                                       | __|(_)| | ___  |__ /                                                                 |\r\n" +
                    "|                                                                       | _| | || |/ -_)  |_ \\                                                                 |\r\n" +
                    "|                                                                       |_|  |_||_|\\___| |___/                                                                 |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|     ESC or Left                                                                                                                             Enter or Right   |\r\n" +
                    "|     to go back                                                                                                                              to continue      |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "#--------------------------------------------------------------------------------------------------------------------------------------------------------------#");
            }
            else if (opt == 1) // File_2
            {
                Console.Write(
                    "#--------------------------------------------------------------------------------------------------------------------------------------------------------------#\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                          __________         __    __  .__           __________              __                                               |\r\n" +
                    "|                                          \\______   \\_____ _/  |__/  |_|  |   ____   \\______   \\ _________ _/  |_  ______                                     |\r\n" +
                    "|                                           |    |  _/\\__  \\\\   __\\   __\\  | _/ __ \\   |    |  _//  _ \\__  \\\\   __\\/  ___/                                     |\r\n" +
                    "|               **  **                      |    |   \\ / __ \\|  |  |  | |  |_\\  ___/   |    |   (  <_> ) __ \\|  |  \\___ \\                                      |\r\n" +
                    "|                ****                       |______  /(____  /__|  |__| |____/\\___  >  |______  /\\____(____  /__| /____  >                                     |\r\n" +
                    "|               |\\**/|                             \\/      \\/                     \\/          \\/           \\/          \\/                                      |\r\n" +
                    "|               \\ == /                                                                                                                                         |\r\n" +
                    "|                |  |                                                                                                                                          |\r\n" +
                    "|                |  |                                                                                              /\\      /\\      /\\      /\\                  |\r\n" +
                    "|                \\  /                                                                                             /  \\    /  \\    /  \\    /  \\                 |\r\n" +
                    "|                 \\/     __/___                                                                                   |  |    |  |    |  |    |  |                 |\r\n" +
                    "|                  _____/______|                                                                                  |  |    |  |    |  |    |  |                 |\r\n" +
                    "|          _______/_____\\_______\\_____                                                                           / == \\  / == \\  / == \\  / == \\                |\r\n" +
                    "|          \\              < < <       |                                                                       [] |/¯¯\\|  |/¯¯\\|  |/¯¯\\|  |/¯¯\\|         []     |\r\n" +
                    "|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[][][][][][][][][][][][][][][][][][][][][][]~~~~~|\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                        ___  _  _        _                                                                    |\r\n" +
                    "|                                                                       | __|(_)| | ___  / |                                                                   |\r\n" +
                    "|                                                                       | _| | || |/ -_) | |                                                                   |\r\n" +
                    "|                                                                       |_|  |_||_|\\___| |_|                                                                   |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                        ___  _  _        ___                                                                  |\r\n" +
                    "|                                                                       | __|(_)| | ___  |_  )                                                                 |\r\n" +
                    "|                                                              =====>   | _| | || |/ -_)  / /    <=====                                                        |\r\n" +
                    "|                                                                       |_|  |_||_|\\___| /___|                                                                 |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                        ___  _  _        ____                                                                 |\r\n" +
                    "|                                                                       | __|(_)| | ___  |__ /                                                                 |\r\n" +
                    "|                                                                       | _| | || |/ -_)  |_ \\                                                                 |\r\n" +
                    "|                                                                       |_|  |_||_|\\___| |___/                                                                 |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|     ESC or Left                                                                                                                             Enter or Right   |\r\n" +
                    "|     to go back                                                                                                                              to continue      |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "#--------------------------------------------------------------------------------------------------------------------------------------------------------------#");
            }
            else if (opt == 2) // File_3
            {
                Console.Write(
                    "#--------------------------------------------------------------------------------------------------------------------------------------------------------------#\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                          __________         __    __  .__           __________              __                                               |\r\n" +
                    "|                                          \\______   \\_____ _/  |__/  |_|  |   ____   \\______   \\ _________ _/  |_  ______                                     |\r\n" +
                    "|                                           |    |  _/\\__  \\\\   __\\   __\\  | _/ __ \\   |    |  _//  _ \\__  \\\\   __\\/  ___/                                     |\r\n" +
                    "|               **  **                      |    |   \\ / __ \\|  |  |  | |  |_\\  ___/   |    |   (  <_> ) __ \\|  |  \\___ \\                                      |\r\n" +
                    "|                ****                       |______  /(____  /__|  |__| |____/\\___  >  |______  /\\____(____  /__| /____  >                                     |\r\n" +
                    "|               |\\**/|                             \\/      \\/                     \\/          \\/           \\/          \\/                                      |\r\n" +
                    "|               \\ == /                                                                                                                                         |\r\n" +
                    "|                |  |                                                                                                                                          |\r\n" +
                    "|                |  |                                                                                              /\\      /\\      /\\      /\\                  |\r\n" +
                    "|                \\  /                                                                                             /  \\    /  \\    /  \\    /  \\                 |\r\n" +
                    "|                 \\/     __/___                                                                                   |  |    |  |    |  |    |  |                 |\r\n" +
                    "|                  _____/______|                                                                                  |  |    |  |    |  |    |  |                 |\r\n" +
                    "|          _______/_____\\_______\\_____                                                                           / == \\  / == \\  / == \\  / == \\                |\r\n" +
                    "|          \\              < < <       |                                                                       [] |/¯¯\\|  |/¯¯\\|  |/¯¯\\|  |/¯¯\\|         []     |\r\n" +
                    "|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[][][][][][][][][][][][][][][][][][][][][][]~~~~~|\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                        ___  _  _        _                                                                    |\r\n" +
                    "|                                                                       | __|(_)| | ___  / |                                                                   |\r\n" +
                    "|                                                                       | _| | || |/ -_) | |                                                                   |\r\n" +
                    "|                                                                       |_|  |_||_|\\___| |_|                                                                   |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                        ___  _  _        ___                                                                  |\r\n" +
                    "|                                                                       | __|(_)| | ___  |_  )                                                                 |\r\n" +
                    "|                                                                       | _| | || |/ -_)  / /                                                                  |\r\n" +
                    "|                                                                       |_|  |_||_|\\___| /___|                                                                 |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                        ___  _  _        ____                                                                 |\r\n" +
                    "|                                                                       | __|(_)| | ___  |__ /                                                                 |\r\n" +
                    "|                                                              =====>   | _| | || |/ -_)  |_ \\   <=====                                                        |\r\n" +
                    "|                                                                       |_|  |_||_|\\___| |___/                                                                 |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|     ESC or Left                                                                                                                             Enter or Right   |\r\n" +
                    "|     to go back                                                                                                                              to continue      |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "|                                                                                                                                                              |\r\n" +
                    "#--------------------------------------------------------------------------------------------------------------------------------------------------------------#");
            }
            switch (Console.ReadKey(true).Key)
            {
                case ConsoleKey.W:
                case ConsoleKey.UpArrow:
                    Load_Game((opt + 2) % 3);
                    return;
                case ConsoleKey.S:
                case ConsoleKey.DownArrow:
                    Load_Game((opt + 1) % 3);
                    return;
                case ConsoleKey.Enter: // The program checks if the file which the player chose exists. If it exists, it loads a game with that game file. If not, an error is shown.
                case ConsoleKey.RightArrow:
                    if (File.Exists($"File_{opt + 1}.txt"))
                    {
                        for (int i = 0; i < 5; i++)
                        {
                            save_file[i] = File.ReadAllText($"File_{opt + 1}.txt").Split(";")[i];
                        }
                        Game(save_file);
                    }
                    else
                    {
                        Console.Clear() ;
                        Console.WriteLine($"There is no saved game file in File_{opt + 1}");
                        Console.ReadKey(true);
                    }
                    return;
                case ConsoleKey.Escape:
                case ConsoleKey.A:
                case ConsoleKey.LeftArrow:
                    Play_Menu(0);
                    return;
            }
            Load_Game(opt);
            return;
        }
        static void Game(string[] save_file) // The actual game part of the program
        {
            Console.Clear();
            Show_Grid(save_file[1].Split(','), save_file[2].Split(','));
            string grid_horizontal_line = "abcdefgh";
            if (Convert.ToInt16(save_file[0]) < 5) // It checks if there are the correct number of battleboats or not - which means if the player placed all of their battleships or not.
            {
                switch (Convert.ToInt16(save_file[0])) // It will look for the number of battleships placed on the player's grid.
                {
                    case 0: // When there is no battleship, which means the player will place the carrier now.

                        string carrier = "";

                        Console.WriteLine();

                        Console.Write("Enter the coordinate of the front end (top-left part) of the carrier - a 3x1 ship (e.g., a1): ");
                        string head_coordinate_carrier = Console.ReadLine().ToLower();

                        // It checks if the head_coordinate of carrier hits something another

                        if (head_coordinate_carrier.Length != 2 || !grid_horizontal_line.Contains(head_coordinate_carrier[0]) || !"12345678".Contains(head_coordinate_carrier[1]))
                        {
                            Console.Clear();
                            Console.WriteLine("The coordinate entered is invalid for the grid. Please enter a valid coordinate.");
                            Console.ReadKey(true);
                            Game(save_file);
                            return;
                        }

                        if (save_file[1].Contains(head_coordinate_carrier))
                        {
                            Console.Clear();
                            Console.WriteLine("The coordinate entered is NOT empty. Please enter an empty coordinate.");
                            Console.ReadKey(true);
                            Game(save_file);
                            return;
                        }

                        Console.Write("What is the direction of the carrier? (V)ertical/(H)orizontal : ");
                        string carrier_direction = Console.ReadLine().ToLower();

                        // And now it checks it for the rest of the battleship

                        if ("vertical".Contains(carrier_direction))
                        {
                            carrier = $"{head_coordinate_carrier} {head_coordinate_carrier[0]}{int.Parse(head_coordinate_carrier[1].ToString()) + 1} {head_coordinate_carrier[0]}{Int16.Parse(head_coordinate_carrier[1].ToString()) + 2}";
                            foreach (string part in carrier.Split(' '))
                            {
                                if (save_file[1].Contains(part))
                                {
                                    Console.Clear();
                                    Console.WriteLine("The carrier will collide with another boat! Please choose another place.");
                                    Console.ReadKey(true);
                                    Game(save_file);
                                    return;
                                }
                                else if (!(grid_horizontal_line.Contains(part[0])) || Int16.Parse(part[1].ToString()) > 8)
                                {
                                    Console.Clear();
                                    Console.WriteLine("The carrier will go out of the grid! Please choose another place.");
                                    Console.ReadKey(true);
                                    Game(save_file);
                                    return;
                                }
                            }
                        }
                        else if ("horizontal".Contains(carrier_direction))
                        {
                            try
                            {
                                carrier = $"{head_coordinate_carrier} {grid_horizontal_line[grid_horizontal_line.IndexOf(head_coordinate_carrier[0]) + 1]}{head_coordinate_carrier[1]} {grid_horizontal_line[grid_horizontal_line.IndexOf(head_coordinate_carrier[0]) + 2]}{head_coordinate_carrier[1]}";
                            }
                            catch
                            {
                                Console.Clear();
                                Console.WriteLine("The carrier will go out of the grid! Please choose another place.");
                                Console.ReadKey(true);
                                Game(save_file);
                                return;
                            }

                            foreach (string part in carrier.Split(' '))
                            {
                                if (save_file[1].Contains(part))
                                {
                                    Console.Clear();
                                    Console.WriteLine("The carrier will collide with another boat! Please choose another place.");
                                    Console.ReadKey(true);
                                    Game(save_file);
                                    return;
                                }
                                else if (!(grid_horizontal_line.Contains(part[0])) || Int16.Parse(part[1].ToString()) > 8)
                                {
                                    Console.Clear();
                                    Console.WriteLine("The carrier will go out of the grid! Please choose another place.");
                                    Console.ReadKey(true);
                                    Game(save_file);
                                    return;
                                }
                            }
                        }
                        else
                        {
                            Console.Clear();
                            Console.WriteLine("The direction entered is invalid. Please try again.");
                            Console.ReadKey(true);
                            Game(save_file);
                        }

                        save_file[1] = save_file[1].Split(',')[0] + carrier + save_file[1].Substring(save_file[1].IndexOf(','));
                        save_file[0] = $"{Int16.Parse(save_file[0]) + 1}";
                        Game(save_file);
                        return;
                    case 1 or 2: // So there is at least the carrier placed, now the submarine(s).
                        string submarine = "";

                        Console.WriteLine();

                        Console.Write("Enter the coordinate of the front end (top-left part) of the submarine - a 2x1 battleship (e.g., a1): ");
                        string head_coordinate_submarine = Console.ReadLine().ToLower();

                        if (head_coordinate_submarine.Length != 2 || !grid_horizontal_line.Contains(head_coordinate_submarine[0]) || !"12345678".Contains(head_coordinate_submarine[1]))
                        {
                            Console.Clear();
                            Console.WriteLine("The coordinate entered is invalid for the grid. Please enter a valid coordinate.");
                            Console.ReadKey(true);
                            Game(save_file);
                            return;
                        }

                        if (save_file[1].Contains(head_coordinate_submarine))
                        {
                            Console.Clear();
                            Console.WriteLine("The coordinate entered is NOT empty. Please enter an empty coordinate.");
                            Console.ReadKey(true);
                            Game(save_file);
                            return;
                        }

                        Console.Write("What is the direction of the submarine? (V)ertical/(H)orizontal : ");
                        string submarine_direction = Console.ReadLine().ToLower();

                        if ("vertical".Contains(submarine_direction))
                        {
                            submarine = $"{head_coordinate_submarine} {head_coordinate_submarine[0]}{int.Parse(head_coordinate_submarine[1].ToString()) + 1}";
                            foreach (string part in submarine.Split(' '))
                            {
                                if (save_file[1].Contains(part))
                                {
                                    Console.Clear();
                                    Console.WriteLine("The submarine will collide with another boat! Please choose another place.");
                                    Console.ReadKey(true);
                                    Game(save_file);
                                    return;
                                }
                                else if (!(grid_horizontal_line.Contains(part[0])) || Int16.Parse(part[1].ToString()) > 8)
                                {
                                    Console.Clear();
                                    Console.WriteLine("The submarine will go out of the grid! Please choose another place.");
                                    Console.ReadKey(true);
                                    Game(save_file);
                                    return;
                                }
                            }
                        }
                        else if ("horizontal".Contains(submarine_direction))
                        {
                            try
                            {
                                submarine = $"{head_coordinate_submarine} {grid_horizontal_line[grid_horizontal_line.IndexOf(head_coordinate_submarine[0]) + 1]}{head_coordinate_submarine[1]}";
                            }
                            catch
                            {
                                Console.Clear();
                                Console.WriteLine("The submarine will go out of the grid! Please choose another place.");
                                Console.ReadKey(true);
                                Game(save_file);
                                return;
                            }

                            foreach (string part in submarine.Split(' '))
                            {
                                if (save_file[1].Contains(part))
                                {
                                    Console.Clear();
                                    Console.WriteLine("The submarine will collide with another boat! Please choose another place.");
                                    Console.ReadKey(true);
                                    Game(save_file);
                                    return;
                                }
                                else if (!(grid_horizontal_line.Contains(part[0])) || Int16.Parse(part[1].ToString()) > 8)
                                {
                                    Console.Clear();
                                    Console.WriteLine("The submarine will go out of the grid! Please choose another place.");
                                    Console.ReadKey(true);
                                    Game(save_file);
                                    return;
                                }
                            }
                        }
                        else
                        {
                            Console.Clear();
                            Console.WriteLine("The direction entered is invalid. Please try again.");
                            Console.ReadKey(true);
                            Game(save_file);
                        }

                        save_file[1] = save_file[1].Split(',')[0] + " " + submarine + save_file[1].Substring(save_file[1].IndexOf(','));
                        save_file[0] = $"{Int16.Parse(save_file[0]) + 1}";
                        Game(save_file);
                        return;
                    case 3 or 4: // Only the destroyers left
                        string destroyer = "";

                        Console.WriteLine();

                        Console.Write("Enter the coordinate of the front end (top-left part) of the destroyer - a 1x1 battleship (e.g., a1): ");
                        string head_coordinate_destroyer = Console.ReadLine().ToLower();

                        if (head_coordinate_destroyer.Length != 2 || !grid_horizontal_line.Contains(head_coordinate_destroyer[0]) || !"12345678".Contains(head_coordinate_destroyer[1]))
                        {
                            Console.Clear();
                            Console.WriteLine("The coordinate entered is invalid for the grid. Please enter a valid coordinate.");
                            Console.ReadKey(true);
                            Game(save_file);
                            return;
                        }

                        if (save_file[1].Contains(head_coordinate_destroyer))
                        {
                            Console.Clear();
                            Console.WriteLine("The coordinate entered is NOT empty. Please enter an empty coordinate.");
                            Console.ReadKey(true);
                            Game(save_file);
                            return;
                        }

                        destroyer = head_coordinate_destroyer;

                        save_file[1] = save_file[1].Split(',')[0] + " " + destroyer + save_file[1].Substring(save_file[1].IndexOf(','));
                        save_file[0] = $"{Int16.Parse(save_file[0]) + 1}";
                        Game(save_file);
                        return;
                }
                save_file[0] = Convert.ToString(Convert.ToInt16(save_file[0]) + 1);
                Game(save_file);
                return;
            }

            if (save_file[4] == "NO") // If the computer did not place it's battleships
            {

                Random bot_choose = new Random();
                int i = 0;
                while (i < 5)
                {
                    switch (i)
                    {
                        case 0:
                            string carrier = "";
                            int carrier_direction = bot_choose.Next(2);
                            if (carrier_direction == 0) //Lets say 0 is for horizontal
                            {
                                int carrier_head_coordinate_X = bot_choose.Next(6);
                                int carrier_head_coordinate_Y = bot_choose.Next(8);

                                carrier =
                                    $"{grid_horizontal_line[carrier_head_coordinate_X]}{carrier_head_coordinate_Y + 1} " +
                                    $"{grid_horizontal_line[carrier_head_coordinate_X + 1]}{carrier_head_coordinate_Y + 1} " +
                                    $"{grid_horizontal_line[carrier_head_coordinate_X + 2]}{carrier_head_coordinate_Y + 1}";
                            }
                            else
                            {
                                int carrier_head_coordinate_X = bot_choose.Next(8);
                                int carrier_head_coordinate_Y = bot_choose.Next(6);

                                carrier =
                                    $"{grid_horizontal_line[carrier_head_coordinate_X]}{carrier_head_coordinate_Y + 1} " +
                                    $"{grid_horizontal_line[carrier_head_coordinate_X]}{carrier_head_coordinate_Y + 2} " +
                                    $"{grid_horizontal_line[carrier_head_coordinate_X]}{carrier_head_coordinate_Y + 3}";
                            }
                            save_file[2] = save_file[2].Split(',')[0] + carrier + save_file[2].Substring(save_file[2].IndexOf(','));
                            i++;
                            continue;
                        case 1 or 2:
                            string submarine = "";
                            int submarine_direction = bot_choose.Next(2);
                            if (submarine_direction == 0) //Lets say 0 is for horizontal
                            {
                                int submarine_head_coordinate_X = bot_choose.Next(7);
                                int submarine_head_coordinate_Y = bot_choose.Next(8);

                                submarine =
                                    $"{grid_horizontal_line[submarine_head_coordinate_X]}{submarine_head_coordinate_Y + 1} " +
                                    $"{grid_horizontal_line[submarine_head_coordinate_X + 1]}{submarine_head_coordinate_Y + 1}";
                            }
                            else
                            {
                                int submarine_head_coordinate_X = bot_choose.Next(8);
                                int submarine_head_coordinate_Y = bot_choose.Next(7);

                                submarine =
                                    $"{grid_horizontal_line[submarine_head_coordinate_X]}{submarine_head_coordinate_Y + 1} " +
                                    $"{grid_horizontal_line[submarine_head_coordinate_X]}{submarine_head_coordinate_Y + 2}";
                            }
                            foreach (string part in submarine.Split(' '))
                            {
                                if (save_file[2].Split(',')[0].Contains(part))
                                {
                                    continue;
                                }
                            }
                            save_file[2] = save_file[2].Split(',')[0] + " " + submarine + save_file[2].Substring(save_file[2].IndexOf(','));
                            i++;
                            continue;

                        case 3 or 4:

                            string destroyer = "";
                            
                            int destroyer_head_coordinate_X = bot_choose.Next(8);
                            int destroyer_head_coordinate_Y = bot_choose.Next(8);

                            destroyer =
                                    $"{grid_horizontal_line[destroyer_head_coordinate_X]}{destroyer_head_coordinate_Y + 1}";
                            
                            if (save_file[2].Split(',')[0].Contains(destroyer))
                            {
                                continue;
                            }
                            
                            save_file[2] = save_file[2].Split(',')[0] + " " + destroyer + save_file[2].Substring(save_file[2].IndexOf(','));
                            i++;
                            continue;
                    }
                }
                if (i == 5)
                {
                    save_file[4] = "YES";
                }
            }

            bool game_continue = true;

            string[] targets = new string[5];

            int total_counter = 1;

            while (game_continue) // While the game is not finished
            {
                Show_Grid(save_file[1].Split(','), save_file[2].Split(','));

                Console.WriteLine("Press ENTER to continue (or press ESC to exit)..."); // So the player can Save or delete save and exit, or continue to play in the beginning of each round.
                switch (Console.ReadKey(true).Key)
                {
                    case ConsoleKey.Enter:
                        Show_Grid(save_file[1].Split(','), save_file[2].Split(','));

                        int i = 0;
                        while (i < 5) // The player will choose 5 different targets each round.
                        {
                            Console.Write($"Enter the coordinate of the {i+1}. target (e.g., a1): ");
                            string target = Console.ReadLine();

                            // It checks if the target coordinate obeys the rule
                            if (target.Length != 2 || !grid_horizontal_line.Contains(target[0]) || !"12345678".Contains(target[1]))
                            {
                                Console.Clear();
                                Console.WriteLine("The target coordinate entered is invalid for the grid. Please enter a valid coordinate.");
                                Console.ReadKey(true);
                                continue;
                            }
                            else if (targets.Contains(target) || save_file[2].Split(',')[1].Contains(target) || save_file[2].Split(',')[2].Contains(target))
                            {
                                Console.Clear();
                                Console.WriteLine("You can not select a coordinate as a target twice. Choose another coordinate.");
                                Console.ReadKey(true);
                                continue;
                            }
                            else
                            {
                                targets[i] = target;
                                i++;
                            }
                            if (total_counter == 13 && i == 3)
                            {
                                break;
                            }
                        }

                        int j = 0;
                        int bot_hits = 0;
                        int bot_misses = 0;
                        Random opponent_target = new Random();
                        while (j < 5) // Now the computer randomly chooses 5 target coordinates
                        {
                            string target = $"{grid_horizontal_line[opponent_target.Next(8)]}{opponent_target.Next(8) + 1}";
                            if (save_file[1].Split(',')[0].Contains(target)) // It checks if the computer's missiles hit the player's boats or not
                            {
                                save_file[1] = save_file[1].Replace(target, String.Empty);
                                save_file[1] = $"{save_file[1].Split(',')[0]},{save_file[1].Split(',')[1]} {target},{save_file[1].Split(',')[2]}";
                                bot_hits++;
                                j++;
                            }
                            else if (save_file[1].Split(',')[1].Contains(target) || (save_file[1].Split(',')[2].Contains(target)))
                            {
                                continue;
                            }
                            else
                            {
                                save_file[1] = $"{save_file[1].Split(',')[0]},{save_file[1].Split(',')[1]},{save_file[1].Split(',')[2]} {target}";
                                bot_misses++;
                                j++;
                            }
                            if (total_counter == 13 && j == 3)
                            {
                                break;
                            }
                        }

                        int hit_counter = 0;
                        int miss_counter = 0;

                        foreach(string target in targets) // Now it checks if the player hit any boat
                        {
                            if (save_file[2].Split(',')[0].Contains(target))
                            {
                                save_file[2] = save_file[2].Replace(target, String.Empty);
                                save_file[2] = $"{save_file[2].Split(',')[0]},{save_file[2].Split(',')[1]} {target},{save_file[2].Split(',')[2]}";
                                hit_counter++;
                            }
                            else
                            {
                                save_file[2] = $"{save_file[2].Split(',')[0]},{save_file[2].Split(',')[1]},{save_file[2].Split(',')[2]} {target}";
                                miss_counter++;
                            }
                        }

                        //The num of hits and misses are presented to the player.
                        Console.WriteLine($"Hits  : {hit_counter}\nMisses: {miss_counter}");
                        Console.WriteLine();
                        Console.WriteLine($"Hits taken       :{bot_hits}\nOpponent misses: {bot_misses}");

                        // It checks who has won when there is no B left at least in one 8x8 grid
                        if (save_file[1].Split(',')[0].Trim().Length == 0 && save_file[2].Split(',')[0].Trim().Length == 0)
                        {
                            Console.WriteLine("It is a tie!");
                            game_continue = false;
                            if (File.Exists(save_file[3]))
                            {
                                File.Delete(save_file[3]); // The game file finished will be deleted.
                            }
                            Console.ReadKey(true);
                        }
                        else if (save_file[1].Split(',')[0].Trim().Length == 0)
                        {
                            Console.WriteLine("The computer wins!");
                            game_continue = false;
                            if (File.Exists(save_file[3]))
                            {
                                File.Delete(save_file[3]); // The game file finished will be deleted.
                            }
                            Console.ReadKey(true);
                        }
                        else if (save_file[2].Split(',')[0].Trim().Length == 0)
                        {
                            Console.WriteLine("You won!");
                            game_continue = false;
                            if (File.Exists(save_file[3]))
                            {
                                File.Delete(save_file[3]); // The game file finished will be deleted.
                            }
                            Console.ReadKey(true);
                        }
                        continue;
                    case ConsoleKey.Escape: // If the player doesn't want to continue playing
                        bool close = true;
                        do
                        {
                            Console.Clear();
                            Console.Write("Do you want to save the game file? (Y/N): "); // The player can choose to just close the game without saving.
                            string opt = Console.ReadLine().ToLower();
                            if (opt.Length != 0)
                            {
                                if ("yes".Contains(opt)) // If the player wants to save the game
                                {
                                    bool repeat = true;
                                    do
                                    {
                                        Console.Clear();
                                        for (int ii = 0; ii < 3; ii++) // I used ii because i was already used and I was bored.
                                        {
                                            Console.Write($"{ii + 1}- File_{ii + 1}");
                                            bool is_file = File.Exists($"File_{ii + 1}.txt");
                                            if (!is_file)
                                            {
                                                Console.WriteLine(" | EMPTY"); // It will write if the file is empty.
                                            }
                                            else
                                            {
                                                Console.WriteLine();
                                            }
                                        }
                                        Console.WriteLine();
                                        Console.Write("Enter the file option (1/2/3): "); // The player will choose the save file to write the game file on
                                        int opt2 = Convert.ToInt16(Console.ReadLine());
                                        if (opt2 > 0 && opt2 < 4)
                                        {
                                            string file_saver = $"{save_file[0]};{save_file[1]};{save_file[2]};File_{opt2}.txt;{save_file[4]}";
                                            File.WriteAllText($"File_{opt2}.txt", file_saver);
                                            return;
                                        }
                                        else
                                        {
                                            continue;
                                        }
                                    }while(repeat);
                                }
                                else if ("no".Contains(opt)) // Or not
                                {
                                    return;
                                }
                                else
                                {
                                    continue;
                                }
                            }
                            else
                            {
                                continue;
                            }
                        } while (close);
                        return;
                } 

            }
            Show_Grid(save_file[1].Split(','), save_file[2].Split(','));
            Console.ReadKey();
        }
        static void Show_Grid(string[] player_coordinates, string[] opponent_coordinates) // Like the heart of the game - where the battleboats game is pesented to the user
        {
            Console.Clear();

            string[] playerBs = player_coordinates[0].Split(' ');
            string[] playerHs = player_coordinates[1].Split(' ');
            string[] playerMs = player_coordinates[2].Split(' ');

            string[] opponentBs = opponent_coordinates[0].Split(' ');
            string[] opponentHs = opponent_coordinates[1].Split(' ');
            string[] opponentMs = opponent_coordinates[2].Split(' ');

            string grid_horizontal_line = "abcdefgh";
            string grid_vertical_line = "12345678";

            // All the grids are empty first
            char[,] player_grid =
            {
                {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
            };

            char[,] opponent_grid =
            {
                {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
                {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' },
            };

            if (playerBs.Length > 0)
            {
                foreach (string coordinate in playerBs)
                {
                    if (coordinate.Length > 0)
                    {
                        int y = grid_horizontal_line.IndexOf(coordinate[0]);
                        int x = grid_vertical_line.IndexOf(coordinate[1]);
                        player_grid[x, y] = 'B';
                    }
                }
            }
            if (playerHs.Length > 0)
            {
                foreach (string coordinate in playerHs)
                {
                    if (coordinate.Length > 0)
                    {
                        int y = grid_horizontal_line.IndexOf(coordinate[0]);
                        int x = grid_vertical_line.IndexOf(coordinate[1]);
                        player_grid[x, y] = 'H';
                    }
                }
            }
            if (playerMs.Length > 0)
            {
                foreach (string coordinate in playerMs)
                {
                    if (coordinate.Length > 0) { 
                    int y = grid_horizontal_line.IndexOf(coordinate[0]);
                    int x = grid_vertical_line.IndexOf(coordinate[1]);
                    player_grid[x, y] = 'M';
                    }
                }
            }

            // THIS STATEMENT IS COMMENTED BECUASE IT SHOULD NOT RUN FOR A PROPER GAMEPLAY - IT IS FOR SHOWING THE OPPENENT'S BOATS
            //if (opponentBs.Length > 0)
            //{
            //    foreach (string coordinate in opponentBs)
            //    {
            //        if (coordinate.Length > 0)
            //        {
            //            int y = grid_horizontal_line.IndexOf(coordinate[0]);
            //            int x = grid_vertical_line.IndexOf(coordinate[1]);
            //            opponent_grid[x, y] = 'B';
            //        }
            //    }
            //}
            if (opponentHs.Length > 0)
            {
                foreach (string coordinate in opponentHs)
                {
                    if (coordinate.Length > 0)
                    {
                        int y = grid_horizontal_line.IndexOf(coordinate[0]);
                        int x = grid_vertical_line.IndexOf(coordinate[1]);
                        opponent_grid[x, y] = 'H';
                    }
                }
            }
            if (opponentMs.Length > 0)
            {
                foreach (string coordinate in opponentMs)
                {
                    if (coordinate.Length > 0)
                    {
                        int y = grid_horizontal_line.IndexOf(coordinate[0]);
                        int x = grid_vertical_line.IndexOf(coordinate[1]);
                        opponent_grid[x, y] = 'M';
                    }
                }
            }

            Console.Write
                ("                                                                                                                                                                          \n" +
                "                                 PLAYER                                                                                       OPPONENT                                    \n" +
                "                                                                                                                                                                          \n" +
                "+———+————————+————————+————————+————————+————————+————————+————————+————————+                +———+————————+————————+————————+————————+————————+————————+————————+————————+\n" +
                "| F |    A   |    B   |    C   |    D   |    E   |    F   |    G   |    H   |                | F |    A   |    B   |    C   |    D   |    E   |    F   |    G   |    H   |\n" +
                "+———+————————+————————+————————+————————+————————+————————+————————+————————+                +———+————————+————————+————————+————————+————————+————————+————————+————————+\n");

            string[] vertical_grid_horizontal_line = { 
                "|   |,| 1 |,|   |", 
                "|   |,| 2 |,|   |", 
                "|   |,| 3 |,|   |", 
                "|   |,| 4 |,|   |", 
                "|   |,| 5 |,|   |", 
                "|   |,| 6 |,|   |", 
                "|   |,| 7 |,|   |", 
                "|   |,| 8 |,|   |" 
            };

            string B =
                " | _ )  ," +
                " | _ \\  ," +
                " |___/  ";

            string H =
                " | || | ," +
                " | __ | ," +
                " |_||_| ";

            string M =
                " | \\/ | ," +
                " ||\\/|| ," +
                " ||  || ";

            for (int i = 0; i < 8; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                    Console.Write(vertical_grid_horizontal_line[i].Split(',')[j]);

                    for (int a = 0; a < 8; a++)
                    {
                        if (player_grid[i, a] == 'B')
                        {
                            Console.Write(B.Split(',')[j]);
                        }
                        else if (player_grid[i, a] == 'H')
                        {
                            Console.Write(H.Split(',')[j]);
                        }
                        else if (player_grid[i, a] == 'M')
                        {
                            Console.Write(M.Split(',')[j]);
                        }
                        else
                        {
                            Console.Write("        ");
                        }
                        Console.Write("|");
                    }

                    Console.Write("                ");

                    Console.Write(vertical_grid_horizontal_line[i].Split(',')[j]);

                    for (int a = 0; a < 8; a ++)
                    {
                        if (opponent_grid[i, a] == 'B')
                        {
                            Console.Write(B.Split(',')[j]);
                        }
                        else if (opponent_grid[i, a] == 'H')
                        {
                            Console.Write(H.Split(',')[j]);
                        }
                        else if (opponent_grid[i, a] == 'M')
                        {
                            Console.Write(M.Split(',')[j]);
                        }
                        else
                        {
                            Console.Write("        ");
                        }
                        Console.Write("|");
                    }
                    Console.WriteLine();
                }
                Console.WriteLine("+———+————————+————————+————————+————————+————————+————————+————————+————————+                +———+————————+————————+————————+————————+————————+————————+————————+————————+");
            }
            return;
        }
    }

}